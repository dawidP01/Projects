/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oosdca3;
import java.sql.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import java.util.Date;

/**
 * The main menu field of the program
 * @author dawid
 */
public class MainMenu extends javax.swing.JFrame {
    String database_URL = "jdbc:mysql://localhost:3306/project";;
    String username = "root";
    String dbPassword = "1234";
    
// Sets the different button command booleans to false
    boolean updateProductBoolean = false;
    boolean addProductBoolean = false;
    boolean deleteProductBoolean = false;
    
    boolean updateCustomerBoolean = false;
    boolean addCustomerBoolean = false;
    boolean deleteCustomerBoolean = false;
    
    boolean updateUserBoolean = false;
    boolean addUserBoolean = false;
    boolean deleteUserBoolean = false;
    
    boolean updateInvoiceBoolean = false;
    boolean addInvoiceBoolean = false;
    boolean deleteInvoiceBoolean = false;

//   Sets the size of different tabs
    int productTabSizeSmall = 640;
    int productTabSizeLarge = 910;
    int customerTabSizeSmall = 620;
    int customerTabSizeLarge = 910;
    int userTabSizeSmall = 620;
    int userTabSizeLarge = 910;
    int invoiceTabSizeSmall = 640;
    int invoiceTabSizeLarge = 910;
    int frameHeight = 650;
   
    /**
     * Constructor for the main menu class
     */
    public MainMenu() {
        super("Main Menu");
        setResizable(false);
        initComponents();
        setCustomerTable();
        setProducts();
        setUsers();
        setInvoices();
        setProductComboBox();
        setCustomerComboBox();
        setUserComboBox();
        setInvoiceComboBoxes();
        setDates();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderBtnGroup = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        productTab = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        searchProduct = new javax.swing.JButton();
        deleteProduct = new javax.swing.JButton();
        addProductBtn = new javax.swing.JButton();
        updateProduct = new javax.swing.JButton();
        searchProductField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        searchProductComboBox = new javax.swing.JComboBox<>();
        cancelProudctSearch = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        productConfirmBtn = new javax.swing.JButton();
        productCancelBtn = new javax.swing.JButton();
        productLabel = new javax.swing.JLabel();
        mainProductEventPanel = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        productIdLabel = new javax.swing.JLabel();
        productIdField = new javax.swing.JTextField();
        productNameField = new javax.swing.JTextField();
        productQuantityInBoxField = new javax.swing.JTextField();
        productPriceField = new javax.swing.JTextField();
        productQuantityInStockField = new javax.swing.JTextField();
        customerTab = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        searchCustomer = new javax.swing.JButton();
        deleteCustomer = new javax.swing.JButton();
        addCustomer = new javax.swing.JButton();
        updateCustomer = new javax.swing.JButton();
        cancelCustomerSearch = new javax.swing.JButton();
        searchCustomerField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        searchCustomerComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        addCustomerPanel = new javax.swing.JPanel();
        customerIdLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        customerCountyLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        confirmCustomerBtn = new javax.swing.JButton();
        cancelCustomerBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        customerIdField = new javax.swing.JTextField();
        customerLastNameField = new javax.swing.JTextField();
        customerPhoneField = new javax.swing.JTextField();
        customerAddressField = new javax.swing.JTextField();
        customerCityField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        customerFirstNameField = new javax.swing.JTextField();
        customerLabel = new javax.swing.JLabel();
        customerCountyComboBox = new javax.swing.JComboBox<>();
        customerCountryComboBox = new javax.swing.JComboBox<>();
        userTab = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        updateUser = new javax.swing.JButton();
        searchUser = new javax.swing.JButton();
        deleteUser = new javax.swing.JButton();
        addUser = new javax.swing.JButton();
        searchUserCancelBtn = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        searchUserComboBox = new javax.swing.JComboBox<>();
        searchUserField = new javax.swing.JTextField();
        addUserPanel = new javax.swing.JPanel();
        userConfirmBtn = new javax.swing.JButton();
        cancelUserBtn = new javax.swing.JButton();
        userIdLabel = new javax.swing.JLabel();
        userIdField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        userUsernameField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        userPasswordField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        userFirstNameField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        userLastNameField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        userEmailField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        userPhoneField = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        userAddressField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        userCityField = new javax.swing.JTextField();
        countyLabel = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        userCountyComboBox = new javax.swing.JComboBox<>();
        userCountryComboBox = new javax.swing.JComboBox<>();
        maleBtn = new javax.swing.JRadioButton();
        femaleBtn = new javax.swing.JRadioButton();
        userDOBField = new com.toedter.calendar.JDateChooser();
        invoiceTab = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        invoiceTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        invoiceConfirmBtn = new javax.swing.JButton();
        invoiceCancelBtn = new javax.swing.JButton();
        invoiceLabel = new javax.swing.JLabel();
        mainProductEventPanel2 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        invoiceIdLabel = new javax.swing.JLabel();
        invoiceIdField = new javax.swing.JTextField();
        invoiceQuantityField = new javax.swing.JTextField();
        invoicePriceField = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        productIdComboBox = new javax.swing.JComboBox<>();
        customerIdComboBox = new javax.swing.JComboBox<>();
        invoiceDateField = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        addInvoice = new javax.swing.JButton();
        updateInvoice = new javax.swing.JButton();
        searchInvoiceField = new javax.swing.JTextField();
        searchInvoice = new javax.swing.JButton();
        deleteInvoice = new javax.swing.JButton();
        cancelInvoiceSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        invoiceSearchComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsStateChanged(evt);
            }
        });

        searchProduct.setText("Search");
        searchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchProductActionPerformed(evt);
            }
        });

        deleteProduct.setText("Delete Product");
        deleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProductActionPerformed(evt);
            }
        });

        addProductBtn.setText("Add Product");
        addProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductBtnActionPerformed(evt);
            }
        });

        updateProduct.setText("Update Products");
        updateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProductActionPerformed(evt);
            }
        });

        jLabel21.setText("Search By:");

        cancelProudctSearch.setText("Cancel");
        cancelProudctSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelProudctSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(addProductBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchProductComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchProductField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteProduct, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(searchProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelProudctSearch)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteProduct, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(addProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchProductField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(searchProductComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelProudctSearch)
                    .addComponent(searchProduct))
                .addContainerGap())
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deleteProduct, updateProduct});

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelProudctSearch, searchProduct});

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(productTable);

        productConfirmBtn.setText("Confirm");
        productConfirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productConfirmBtnActionPerformed(evt);
            }
        });

        productCancelBtn.setText("Cancel");
        productCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productCancelBtnActionPerformed(evt);
            }
        });

        productLabel.setText("Are you Sure you want to add this product?");

        jLabel18.setText("Quantity In Stock");

        jLabel17.setText("Price");

        jLabel16.setText("Quantity in Box");

        jLabel15.setText("Name");

        productIdLabel.setText("Product ID");

        productIdField.setText(" ");

        javax.swing.GroupLayout mainProductEventPanelLayout = new javax.swing.GroupLayout(mainProductEventPanel);
        mainProductEventPanel.setLayout(mainProductEventPanelLayout);
        mainProductEventPanelLayout.setHorizontalGroup(
            mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainProductEventPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainProductEventPanelLayout.createSequentialGroup()
                        .addGroup(mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(productIdLabel))
                        .addGap(27, 27, 27)
                        .addComponent(productIdField))
                    .addGroup(mainProductEventPanelLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(18, 18, 18)
                        .addGroup(mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productPriceField)
                            .addComponent(productQuantityInStockField)
                            .addComponent(productQuantityInBoxField)
                            .addComponent(productNameField))))
                .addContainerGap())
        );
        mainProductEventPanelLayout.setVerticalGroup(
            mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainProductEventPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productIdLabel)
                    .addComponent(productIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(productNameField))
                .addGap(18, 18, 18)
                .addGroup(mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(productQuantityInBoxField))
                .addGap(18, 18, 18)
                .addGroup(mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(productPriceField))
                .addGap(18, 18, 18)
                .addGroup(mainProductEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(productQuantityInStockField))
                .addGap(177, 177, 177))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(productLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(productConfirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(mainProductEventPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainProductEventPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productConfirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {productCancelBtn, productConfirmBtn});

        javax.swing.GroupLayout productTabLayout = new javax.swing.GroupLayout(productTab);
        productTab.setLayout(productTabLayout);
        productTabLayout.setHorizontalGroup(
            productTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productTabLayout.createSequentialGroup()
                .addGroup(productTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(productTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
        productTabLayout.setVerticalGroup(
            productTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productTabLayout.createSequentialGroup()
                .addGroup(productTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(productTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabs.addTab("Product", productTab);

        searchCustomer.setText("Search");
        searchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerActionPerformed(evt);
            }
        });

        deleteCustomer.setText("Delete Customer");
        deleteCustomer.setMinimumSize(new java.awt.Dimension(97, 23));
        deleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerActionPerformed(evt);
            }
        });

        addCustomer.setText("Add Customer");
        addCustomer.setMaximumSize(new java.awt.Dimension(97, 23));
        addCustomer.setMinimumSize(new java.awt.Dimension(97, 23));
        addCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerActionPerformed(evt);
            }
        });

        updateCustomer.setText("Update Customers");
        updateCustomer.setMinimumSize(new java.awt.Dimension(97, 23));
        updateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustomerActionPerformed(evt);
            }
        });

        cancelCustomerSearch.setText("Cancel");
        cancelCustomerSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelCustomerSearchActionPerformed(evt);
            }
        });

        jLabel19.setText("Search By:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchCustomerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCustomerField)
                .addGap(18, 18, 18)
                .addComponent(searchCustomer)
                .addGap(18, 18, 18)
                .addComponent(cancelCustomerSearch)
                .addGap(16, 16, 16))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchCustomerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(searchCustomerField)
                    .addComponent(searchCustomer)
                    .addComponent(cancelCustomerSearch))
                .addGap(20, 20, 20))
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelCustomerSearch, searchCustomer});

        jPanel8Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addCustomer, deleteCustomer, updateCustomer});

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(customerTable);

        customerIdLabel.setText("Customer ID");

        jLabel2.setText("Last Name");

        jLabel4.setText("Address");

        jLabel5.setText("City");

        customerCountyLabel.setText("County");

        jLabel7.setText("Country");

        confirmCustomerBtn.setText("Confirm");
        confirmCustomerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmCustomerBtnActionPerformed(evt);
            }
        });

        cancelCustomerBtn.setText("Cancel");
        cancelCustomerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelCustomerBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Phone Number");

        jLabel20.setText("First Name");

        customerLabel.setText("Are you sure you want add this Customer");

        customerCountyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Carlow", "Caven", "Clare", "Cork", "Donegal", "Dublin", "Galway", "Kerry", "Kildare", "Killkenny", "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath", "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Waterford", "Westmeath", "Wexford", "Wicklow" }));

        customerCountryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Poland", "USA", "Ireland" }));
        customerCountryComboBox.setSelectedIndex(2);
        customerCountryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerCountryComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addCustomerPanelLayout = new javax.swing.GroupLayout(addCustomerPanel);
        addCustomerPanel.setLayout(addCustomerPanelLayout);
        addCustomerPanelLayout.setHorizontalGroup(
            addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCustomerPanelLayout.createSequentialGroup()
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addCustomerPanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(customerIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customerCountyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerCityField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(customerAddressField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(customerFirstNameField)
                            .addComponent(customerCountyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customerLastNameField)
                            .addComponent(customerPhoneField)
                            .addComponent(customerIdField)
                            .addComponent(customerCountryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(cancelCustomerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmCustomerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addCustomerPanelLayout.createSequentialGroup()
                        .addComponent(customerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );

        addCustomerPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelCustomerBtn, confirmCustomerBtn});

        addCustomerPanelLayout.setVerticalGroup(
            addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCustomerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(customerLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(customerAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(customerCityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerCountyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerCountyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(customerCountryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(145, 145, 145)
                .addComponent(customerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(confirmCustomerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelCustomerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        addCustomerPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {customerIdField, customerIdLabel});

        addCustomerPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelCustomerBtn, confirmCustomerBtn});

        javax.swing.GroupLayout customerTabLayout = new javax.swing.GroupLayout(customerTab);
        customerTab.setLayout(customerTabLayout);
        customerTabLayout.setHorizontalGroup(
            customerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerTabLayout.createSequentialGroup()
                .addGroup(customerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(customerTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );
        customerTabLayout.setVerticalGroup(
            customerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerTabLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(customerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addCustomerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabs.addTab("Customer", customerTab);

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8"
            }
        ));
        jScrollPane4.setViewportView(userTable);
        if (userTable.getColumnModel().getColumnCount() > 0) {
            userTable.getColumnModel().getColumn(0).setMinWidth(40);
            userTable.getColumnModel().getColumn(1).setMinWidth(40);
            userTable.getColumnModel().getColumn(2).setMinWidth(40);
        }

        updateUser.setText("Update Users");
        updateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateUserActionPerformed(evt);
            }
        });

        searchUser.setText("Search");
        searchUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserActionPerformed(evt);
            }
        });

        deleteUser.setText("Delete User");
        deleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserActionPerformed(evt);
            }
        });

        addUser.setText("Add User");
        addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActionPerformed(evt);
            }
        });

        searchUserCancelBtn.setText("Cancel");
        searchUserCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserCancelBtnActionPerformed(evt);
            }
        });

        jLabel22.setText("Search By:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(18, 18, 18)
                        .addComponent(searchUserComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(addUser, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateUser, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(searchUserField))
                .addGap(17, 17, 17)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(searchUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchUserCancelBtn))
                    .addComponent(deleteUser, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addUser, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchUser)
                    .addComponent(searchUserCancelBtn)
                    .addComponent(jLabel22)
                    .addComponent(searchUserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchUserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addUser, deleteUser, updateUser});

        userConfirmBtn.setText("Confirm");
        userConfirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userConfirmBtnActionPerformed(evt);
            }
        });

        cancelUserBtn.setText("Cancel");
        cancelUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelUserBtnActionPerformed(evt);
            }
        });

        userIdLabel.setText("User ID");

        jLabel9.setText("Username");

        jLabel10.setText("Password");

        jLabel11.setText("First Name");

        jLabel12.setText("Last Name");

        jLabel13.setText("Email");

        jLabel23.setText("Phone");

        jLabel24.setText("Address");

        jLabel25.setText("City");

        countyLabel.setText("County");

        jLabel27.setText("Country");

        jLabel34.setText("Gender");

        jLabel36.setText("Birth Date");

        userLabel.setText("Are you sure you want to add this User");

        userCountyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Carlow", "Caven", "Clare", "Cork", "Donegal", "Dublin", "Galway", "Kerry", "Kildare", "Killkenny", "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath", "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Waterford", "Westmeath", "Wexford", "Wicklow" }));

        userCountryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Poland", "Usa", "Ireland" }));
        userCountryComboBox.setSelectedIndex(2);
        userCountryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userCountryComboBoxActionPerformed(evt);
            }
        });

        genderBtnGroup.add(maleBtn);
        maleBtn.setSelected(true);
        maleBtn.setText("Male");

        genderBtnGroup.add(femaleBtn);
        femaleBtn.setText("Female");

        javax.swing.GroupLayout addUserPanelLayout = new javax.swing.GroupLayout(addUserPanel);
        addUserPanel.setLayout(addUserPanelLayout);
        addUserPanelLayout.setHorizontalGroup(
            addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addUserPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(addUserPanelLayout.createSequentialGroup()
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addUserPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(userIdLabel)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25)
                            .addComponent(countyLabel)
                            .addComponent(jLabel27)
                            .addComponent(jLabel36))
                        .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addUserPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(userCityField)
                                    .addComponent(userAddressField)
                                    .addComponent(userPhoneField)
                                    .addComponent(userEmailField)
                                    .addComponent(userLastNameField)
                                    .addComponent(userFirstNameField)
                                    .addComponent(userPasswordField)
                                    .addComponent(userUsernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                    .addComponent(userIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                    .addComponent(userCountyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(userCountryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addUserPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(userDOBField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(addUserPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(userConfirmBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(cancelUserBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(addUserPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel34)
                        .addGap(37, 37, 37)
                        .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(femaleBtn)
                            .addComponent(maleBtn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addUserPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {userAddressField, userCityField, userCountryComboBox, userCountyComboBox, userEmailField, userFirstNameField, userIdField, userLastNameField, userPasswordField, userPhoneField, userUsernameField});

        addUserPanelLayout.setVerticalGroup(
            addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addUserPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userIdLabel)
                    .addComponent(userIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(userUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(userPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(userFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(userLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(userEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(userPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(userAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25)
                    .addComponent(userCityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countyLabel)
                    .addComponent(userCountyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(userCountryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(maleBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(femaleBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36)
                    .addComponent(userDOBField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(userLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userConfirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        addUserPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelUserBtn, userConfirmBtn});

        addUserPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {userAddressField, userCityField, userEmailField, userFirstNameField, userIdField, userLastNameField, userPasswordField, userPhoneField, userUsernameField});

        javax.swing.GroupLayout userTabLayout = new javax.swing.GroupLayout(userTab);
        userTab.setLayout(userTabLayout);
        userTabLayout.setHorizontalGroup(
            userTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userTabLayout.createSequentialGroup()
                .addGroup(userTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(userTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(addUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        userTabLayout.setVerticalGroup(
            userTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userTabLayout.createSequentialGroup()
                .addGroup(userTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(userTabLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tabs.addTab("Users", userTab);

        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(invoiceTable);

        invoiceConfirmBtn.setText("Confirm");
        invoiceConfirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceConfirmBtnActionPerformed(evt);
            }
        });

        invoiceCancelBtn.setText("Cancel");
        invoiceCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceCancelBtnActionPerformed(evt);
            }
        });

        invoiceLabel.setText("Are you Sure you want to add this invoice?");

        jLabel29.setText("Price");

        jLabel30.setText("Quantity");

        jLabel31.setText("Customer ID");

        jLabel32.setText("Product ID");

        invoiceIdLabel.setText("Invoice ID");

        jLabel35.setText("Date");

        productIdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));

        customerIdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));

        javax.swing.GroupLayout mainProductEventPanel2Layout = new javax.swing.GroupLayout(mainProductEventPanel2);
        mainProductEventPanel2.setLayout(mainProductEventPanel2Layout);
        mainProductEventPanel2Layout.setHorizontalGroup(
            mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainProductEventPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(jLabel35)
                    .addComponent(jLabel32)
                    .addComponent(jLabel31)
                    .addComponent(jLabel30)
                    .addComponent(invoiceIdLabel))
                .addGap(41, 41, 41)
                .addGroup(mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invoiceIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoiceQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoicePriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoiceDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainProductEventPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {customerIdComboBox, invoiceDateField, invoiceIdField, invoicePriceField, invoiceQuantityField, productIdComboBox});

        mainProductEventPanel2Layout.setVerticalGroup(
            mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainProductEventPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invoiceIdLabel)
                    .addComponent(invoiceIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(productIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(customerIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(invoiceQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(invoicePriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainProductEventPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel35)
                    .addComponent(invoiceDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(127, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invoiceCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoiceConfirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(mainProductEventPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(invoiceLabel)
                .addGap(17, 17, 17))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainProductEventPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(64, 64, 64)
                .addComponent(invoiceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invoiceConfirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(invoiceCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        addInvoice.setText("Add Invoice");
        addInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInvoiceActionPerformed(evt);
            }
        });

        updateInvoice.setText("Update Invoices");
        updateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateInvoiceActionPerformed(evt);
            }
        });

        searchInvoice.setText("Search");
        searchInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchInvoiceActionPerformed(evt);
            }
        });

        deleteInvoice.setText("Delete Invoice");
        deleteInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteInvoiceActionPerformed(evt);
            }
        });

        cancelInvoiceSearch.setText("Cancel");
        cancelInvoiceSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelInvoiceSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Search By:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(invoiceSearchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchInvoiceField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchInvoice)
                        .addGap(36, 36, 36)
                        .addComponent(cancelInvoiceSearch)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(addInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updateInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addInvoice, deleteInvoice, updateInvoice});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(searchInvoiceField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchInvoice)
                        .addComponent(cancelInvoiceSearch)
                        .addComponent(jLabel1)
                        .addComponent(invoiceSearchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addInvoice, deleteInvoice, updateInvoice});

        javax.swing.GroupLayout invoiceTabLayout = new javax.swing.GroupLayout(invoiceTab);
        invoiceTab.setLayout(invoiceTabLayout);
        invoiceTabLayout.setHorizontalGroup(
            invoiceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoiceTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invoiceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );
        invoiceTabLayout.setVerticalGroup(
            invoiceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoiceTabLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabs.addTab("Invoice", invoiceTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// Listener for the update Customer button
    private void updateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomerActionPerformed
        if(customerTable.getSelectedRow()!= -1){
            int selectedColumn = customerTable.getSelectedRow();
            customerIdField.setText(customerTable.getModel().getValueAt(selectedColumn, 0) + "");
            customerFirstNameField.setText(customerTable.getModel().getValueAt(selectedColumn, 1) + "");
            customerLastNameField.setText(customerTable.getModel().getValueAt(selectedColumn, 2) + "");
            customerPhoneField.setText(customerTable.getModel().getValueAt(selectedColumn, 3) + "");
            customerAddressField.setText(customerTable.getModel().getValueAt(selectedColumn, 4) + "");
            customerCityField.setText(customerTable.getModel().getValueAt(selectedColumn, 5) + "");
            for(int i=0;i<customerCountyComboBox.getItemCount();i++){
                if((customerCountyComboBox.getItemAt(i)+"").compareTo(customerTable.getModel().getValueAt(selectedColumn, 6) + "")==0){
                    customerCountyComboBox.setSelectedIndex(i);
                }
            }
            for(int i=0;i<customerCountryComboBox.getItemCount();i++){
                if((customerCountryComboBox.getItemAt(i)+"").compareTo(customerTable.getModel().getValueAt(selectedColumn, 7) + "")==0){
                    customerCountryComboBox.setSelectedIndex(i);
                }
            }
            resetCustomerButtons();
            setCustomerFieldsEditable();
            updateCustomerBoolean = true;
            setCustomerLabel();
            this.setSize(customerTabSizeLarge,frameHeight);
        } else{
            JFrame popup = new JFrame("Error Message");
            JOptionPane.showMessageDialog(popup, "Please select a product to update");
        }
    }//GEN-LAST:event_updateCustomerActionPerformed
// Update button listener for the ProductTab
    private void updateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProductActionPerformed
        if(productTable.getSelectedRow()!= -1){
            int selectedColumn = productTable.getSelectedRow();
            productIdField.setText(productTable.getModel().getValueAt(selectedColumn, 0) + "");
            productNameField.setText(productTable.getModel().getValueAt(selectedColumn, 1) + "");
            productQuantityInBoxField.setText(productTable.getModel().getValueAt(selectedColumn, 2) + "");
            productPriceField.setText(productTable.getModel().getValueAt(selectedColumn, 3) + "");
            productQuantityInStockField.setText(productTable.getModel().getValueAt(selectedColumn, 4) + "");
            
            resetProductButtons();
            setProductFieldsEditable();
            updateProductBoolean = true;
            setProductLabel();
            this.setSize(productTabSizeLarge,frameHeight);
        } else{
            JFrame popup = new JFrame("Error Message");
            JOptionPane.showMessageDialog(popup, "Please select a product to update");
        }
    }//GEN-LAST:event_updateProductActionPerformed
// Add button listener for the customer tab
    private void addCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerActionPerformed
        resetCustomerFields();
        this.setSize(customerTabSizeLarge,frameHeight);
        setCustomerFieldsEditable();
        resetCustomerButtons();
        addCustomerBoolean = true;
        setCustomerLabel();
    }//GEN-LAST:event_addCustomerActionPerformed
// Listener for the confirm customer button for add, delete or update
    private void confirmCustomerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmCustomerBtnActionPerformed
        boolean validation = validateCustomer();
        Connection con;
        Statement stm;
        ResultSet result;
        String id = customerIdField.getText();
        String firstName = customerFirstNameField.getText();
        String lastName = customerLastNameField.getText();
        String phone = customerPhoneField.getText();
        String address = customerAddressField.getText();
        String city = customerCityField.getText();
        String county;
        if((customerCountryComboBox.getSelectedItem()+"").compareTo("Ireland")==0){
            county = customerCountyComboBox.getSelectedItem()+"";
        } else {
            county = "";
        }
        String country = customerCountryComboBox.getSelectedItem()+"";
        if(updateCustomerBoolean && validation){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("UPDATE customers SET FirstName=\'"+firstName+"\', LastName=\'"+lastName+"\', PhoneNo=\'"+phone+"\', Address=\'"+address+"\', City=\'"+city+"\', County=\'"+county+"\', Country=\'"+country+"\' WHERE CustomersID="+id);
            }
            catch(SQLException exc){
            exc.printStackTrace();
            }
            resetCustomerButtons();
            setCustomerTable();
            this.setSize(customerTabSizeSmall,frameHeight);
        }
        if(addCustomerBoolean && validation){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("INSERT INTO customers ( FirstName, LastName, PhoneNo, Address, City, County, Country)"
                        + " Values (\'"+firstName+"\', \'"+lastName+"\', \'"+phone+"\', \'"+address+"\', \'"+city+"\', \'"+county+"\', \'"+country+"\')");
            }
            catch(SQLException exc){
            exc.printStackTrace();
            }
            resetCustomerButtons();
            setCustomerTable();
            this.setSize(customerTabSizeSmall,frameHeight);
        }
        if(deleteCustomerBoolean){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("DELETE FROM customers WHERE CustomersID="+id);
            }
            catch(SQLException exc){
                exc.printStackTrace();
            }
            resetCustomerButtons();
            setCustomerTable();
            this.setSize(customerTabSizeSmall,frameHeight);
        }     
    }//GEN-LAST:event_confirmCustomerBtnActionPerformed
// Listener for the cancel Customer button for add, delete or update
    private void cancelCustomerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelCustomerBtnActionPerformed
        resetCustomerButtons();
        this.setSize(customerTabSizeSmall,frameHeight);
    }//GEN-LAST:event_cancelCustomerBtnActionPerformed
// Add button listener for the product tab
    private void addProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductBtnActionPerformed
        resetProductFields();
        this.setSize(productTabSizeLarge,frameHeight);
        setProductFieldsEditable();
        resetProductButtons();
        addProductBoolean = true;
        setProductLabel();
    }//GEN-LAST:event_addProductBtnActionPerformed
// Listener for the confirm product add, delete or update
    private void productConfirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productConfirmBtnActionPerformed
        boolean validation = validateProduct();
        Connection con;
        Statement stm;
        String id = productIdField.getText();
        String name = productNameField.getText();
        String qtnBox = productQuantityInBoxField.getText();
        String price = productPriceField.getText();
        String qtnStock = productQuantityInStockField.getText();
        
        if(updateProductBoolean && validation){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("UPDATE product SET Name=\'"+name+"\', QuantityInBox="+qtnBox+", Price="+price+", QuantityInStock="+qtnStock+" WHERE ProductId="+id);
            }
            catch(SQLException exc){
            exc.printStackTrace();
            }
            resetProductButtons();
            setProducts();
            this.setSize(productTabSizeSmall,frameHeight);
        }
        if(addProductBoolean && validation){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("INSERT INTO product ( Name, QuantityInBox, Price,QuantityInStock)"
                        + " Values (\'"+name+"\', \'"+qtnBox+"\', \'"+price+"\', \'"+qtnStock+"\')");
            }
            catch(SQLException exc){
            exc.printStackTrace();
            }
            resetProductButtons();
            setProducts();
            this.setSize(productTabSizeSmall,frameHeight);
        }
        if(deleteProductBoolean){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("DELETE FROM product WHERE ProductId="+id);
            }
            catch(SQLException exc){
                exc.printStackTrace();
            }
            resetProductButtons();
            setProducts();
            this.setSize(productTabSizeSmall,frameHeight);
        }     
    }//GEN-LAST:event_productConfirmBtnActionPerformed
// The delete button for the product tab
    private void deleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProductActionPerformed
        if(productTable.getSelectedRow()!= -1){
            int selectedColumn = productTable.getSelectedRow();
            productIdField.setText(productTable.getModel().getValueAt(selectedColumn, 0) + "");
            productNameField.setText(productTable.getModel().getValueAt(selectedColumn, 1) + "");
            productQuantityInBoxField.setText(productTable.getModel().getValueAt(selectedColumn, 2) + "");
            productPriceField.setText(productTable.getModel().getValueAt(selectedColumn, 3) + "");
            productQuantityInStockField.setText(productTable.getModel().getValueAt(selectedColumn, 4) + "");
            
            resetProductButtons();
            deleteProductBoolean = true;
            setProductLabel();
            setProductFieldsUneditable();
            this.setSize(productTabSizeLarge,frameHeight); 
        }
        else{
            JFrame popup = new JFrame("Error Message");
            JOptionPane.showMessageDialog(popup, "Please select a product to delete");
        }
    }//GEN-LAST:event_deleteProductActionPerformed
// Cancels add, update and delete buttons for the proudct tab
    private void productCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productCancelBtnActionPerformed
        resetProductButtons();
        this.setSize(productTabSizeSmall,frameHeight);
    }//GEN-LAST:event_productCancelBtnActionPerformed
// Listener for the Search product button
    private void searchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchProductActionPerformed
        if(searchProductField.getText().compareTo("")!=0){
            String searchCategory = searchProductComboBox.getSelectedItem() + "";
            String searchString = searchProductField.getText();
            searchCategory = searchCategory.replaceAll("\\s+","");
            resetProductButtons();
            Connection con;
            Statement stm;
            ResultSet result;
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                result = stm.executeQuery("SELECT * FROM product WHERE "+searchCategory+"=\'"+searchString+"\'");
                setProducts(result);
            }
            catch(SQLException exc){
                exc.printStackTrace();
            }
            resetProductButtons();
        }
        else{
            JFrame popup = new JFrame("Error Message");
            JOptionPane.showMessageDialog(popup, "Please enter search criteria");
        }
    }//GEN-LAST:event_searchProductActionPerformed
// Cancel Search for product i.e. restarts the table product table
    private void cancelProudctSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelProudctSearchActionPerformed
        setProducts();
    }//GEN-LAST:event_cancelProudctSearchActionPerformed
// Sets size of different  tabs
    private void tabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsStateChanged
        int index = tabs.getSelectedIndex();
        if(index == 0){
            this.setSize(productTabSizeSmall,frameHeight);
        } else if(index == 1){
            this.setSize(customerTabSizeSmall,frameHeight);
        } else if(index == 2){
            this.setSize(userTabSizeSmall,frameHeight);
        } else if(index == 3){
            this.setSize(invoiceTabSizeSmall,frameHeight);
        }
    }//GEN-LAST:event_tabsStateChanged
// Listener for the delete Customer button
    private void deleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerActionPerformed
        if(customerTable.getSelectedRow()!= -1){
            int selectedColumn = customerTable.getSelectedRow();
            customerIdField.setText(customerTable.getModel().getValueAt(selectedColumn, 0) + "");
            customerFirstNameField.setText(customerTable.getModel().getValueAt(selectedColumn, 1) + "");
            customerLastNameField.setText(customerTable.getModel().getValueAt(selectedColumn, 2) + "");
            customerPhoneField.setText(customerTable.getModel().getValueAt(selectedColumn, 3) + "");
            customerAddressField.setText(customerTable.getModel().getValueAt(selectedColumn, 4) + "");
            customerCityField.setText(customerTable.getModel().getValueAt(selectedColumn, 5) + "");
            for(int i=0;i<customerCountyComboBox.getItemCount();i++){
                if((customerCountyComboBox.getItemAt(i)+"").compareTo(customerTable.getModel().getValueAt(selectedColumn, 6) + "")==0){
                    customerCountyComboBox.setSelectedIndex(i);
                }
            }
            for(int i=0;i<customerCountryComboBox.getItemCount();i++){
                if((customerCountryComboBox.getItemAt(i)+"").compareTo(customerTable.getModel().getValueAt(selectedColumn, 7) + "")==0){
                    customerCountryComboBox.setSelectedIndex(i);
                }
            }
            resetCustomerButtons();
            setCustomerFieldsUneditable();
            deleteCustomerBoolean = true;
            setCustomerLabel();
            this.setSize(customerTabSizeLarge,frameHeight);
        } else{
            JFrame popup = new JFrame("Error Message");
            JOptionPane.showMessageDialog(popup, "Please select a customer to delete");
        }

    }//GEN-LAST:event_deleteCustomerActionPerformed
// Cancels The customer search
    private void cancelCustomerSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelCustomerSearchActionPerformed
        setCustomerTable();
    }//GEN-LAST:event_cancelCustomerSearchActionPerformed
// Listener for the search Customer button
    private void searchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerActionPerformed
        if(searchCustomerField.getText().compareTo("")!=0){
            String searchCategory = searchCustomerComboBox.getSelectedItem() + "";
            String searchString = searchCustomerField.getText();
            searchCategory = searchCategory.replaceAll("\\s+","");
            resetCustomerButtons();
            Connection con;
            Statement stm;
            ResultSet result;
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                result = stm.executeQuery("SELECT * FROM customers WHERE "+searchCategory+"=\'"+searchString+"\'");
                setCustomerTable(result);
            }
            catch(SQLException exc){
                exc.printStackTrace();
            }
            resetProductButtons();
        }
        else{
            JFrame popup = new JFrame("Error Message");
            JOptionPane.showMessageDialog(popup, "Please enter search criteria");
        }
    }//GEN-LAST:event_searchCustomerActionPerformed
// Listener for the add user button
    private void addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActionPerformed
        resetUserFields();
        this.setSize(userTabSizeLarge,frameHeight);
        setUserFieldsEditable();
        resetUserButtons();
        addUserBoolean = true;
        setUserLabel();
    }//GEN-LAST:event_addUserActionPerformed
// Listener for the update user button
    private void updateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateUserActionPerformed
    if(userTable.getSelectedRow()!= -1){
        int selectedColumn = userTable.getSelectedRow();
           
        userIdField.setText(userTable.getModel().getValueAt(selectedColumn, 0) + "");
        userUsernameField.setText(userTable.getModel().getValueAt(selectedColumn, 1) + "");
        userPasswordField.setText(userTable.getModel().getValueAt(selectedColumn, 2) + "");
        userFirstNameField.setText(userTable.getModel().getValueAt(selectedColumn, 3) + "");
        userLastNameField.setText(userTable.getModel().getValueAt(selectedColumn, 4) + "");
        userEmailField.setText(userTable.getModel().getValueAt(selectedColumn, 5) + "");
        userPhoneField.setText(userTable.getModel().getValueAt(selectedColumn, 6) + "");
        userAddressField.setText(userTable.getModel().getValueAt(selectedColumn, 7) + "");
        userCityField.setText(userTable.getModel().getValueAt(selectedColumn, 8) + "");
        for(int i=0;i<userCountyComboBox.getItemCount();i++){
            if((userCountyComboBox.getItemAt(i)+"").compareTo(userTable.getModel().getValueAt(selectedColumn, 9) + "")==0){
                userCountyComboBox.setSelectedIndex(i);
            }
        }
        for(int i=0;i<userCountryComboBox.getItemCount();i++){
            if((userCountryComboBox.getItemAt(i)+"").compareTo(userTable.getModel().getValueAt(selectedColumn, 10) + "")==0){
                userCountryComboBox.setSelectedIndex(i);
            }
        }
        if((userTable.getModel().getValueAt(selectedColumn, 11) + "").compareTo("Male")==0){
            maleBtn.setSelected(true);
        } else {
            femaleBtn.setSelected(true);
        }
        try{
            String tableDate = userTable.getModel().getValueAt(selectedColumn, 12) + "";
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse(tableDate);
            userDOBField.setDate(date);
        } catch(ParseException e){
            e.printStackTrace();
        }
        
        resetUserButtons();
        setUserFieldsEditable();
        updateUserBoolean = true;
        setUserLabel();
        this.setSize(userTabSizeLarge,frameHeight);
    } else{
        JFrame popup = new JFrame("Error Message");
        JOptionPane.showMessageDialog(popup, "Please select a user to update");
    }
    }//GEN-LAST:event_updateUserActionPerformed
// Listener for the delete user button
    private void deleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserActionPerformed
    if(userTable.getSelectedRow()!= -1){
        int selectedColumn = userTable.getSelectedRow();
        
        userIdField.setText(userTable.getModel().getValueAt(selectedColumn, 0) + "");
        userUsernameField.setText(userTable.getModel().getValueAt(selectedColumn, 1) + "");
        userPasswordField.setText(userTable.getModel().getValueAt(selectedColumn, 2) + "");
        userFirstNameField.setText(userTable.getModel().getValueAt(selectedColumn, 3) + "");
        userLastNameField.setText(userTable.getModel().getValueAt(selectedColumn, 4) + "");
        userEmailField.setText(userTable.getModel().getValueAt(selectedColumn, 5) + "");
        userPhoneField.setText(userTable.getModel().getValueAt(selectedColumn, 6) + "");
        userAddressField.setText(userTable.getModel().getValueAt(selectedColumn, 7) + "");
        userCityField.setText(userTable.getModel().getValueAt(selectedColumn, 8) + "");
        for(int i=0;i<userCountyComboBox.getItemCount();i++){
            if((userCountyComboBox.getItemAt(i)+"").compareTo(userTable.getModel().getValueAt(selectedColumn, 9) + "")==0){
                userCountyComboBox.setSelectedIndex(i);
            }
        }
        for(int i=0;i<userCountryComboBox.getItemCount();i++){
            if((userCountryComboBox.getItemAt(i)+"").compareTo(userTable.getModel().getValueAt(selectedColumn, 10) + "")==0){
                userCountryComboBox.setSelectedIndex(i);
            }
        }
        if((userTable.getModel().getValueAt(selectedColumn, 11) + "").compareTo("Male")==0){
            maleBtn.setSelected(true);
        } else {
            femaleBtn.setSelected(true);
        }
        try{
            String tableDate = userTable.getModel().getValueAt(selectedColumn, 12) + "";
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse(tableDate);
            userDOBField.setDate(date);
        } catch(ParseException e){
            e.printStackTrace();
        }

        resetUserButtons();
        deleteUserBoolean = true;
        setUserLabel();
        setUserFieldsUneditable();
        this.setSize(userTabSizeLarge,frameHeight); 
    }
    else{
        JFrame popup = new JFrame("Error Message");
        JOptionPane.showMessageDialog(popup, "Please select a user to delete");
    }
    }//GEN-LAST:event_deleteUserActionPerformed
// Listener for the cancel button
    private void cancelUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelUserBtnActionPerformed
        resetUserButtons();
        this.setSize(userTabSizeSmall,frameHeight);
    }//GEN-LAST:event_cancelUserBtnActionPerformed
// Listener for the search user button
    private void searchUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserActionPerformed
        if(searchUserField.getText().compareTo("")!=0){
            String searchCategory = searchUserComboBox.getSelectedItem() + "";
            String searchString = searchUserField.getText();
            searchCategory = searchCategory.replaceAll("\\s+","");
            resetUserButtons();
            Connection con;
            Statement stm;
            ResultSet result;
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                result = stm.executeQuery("SELECT * FROM users WHERE "+searchCategory+"=\'"+searchString+"\'");
                setUserTable(result);
            }
            catch(SQLException exc){
                exc.printStackTrace();
            }
            resetUserButtons();
        }
        else{
            JFrame popup = new JFrame("Error Message");
            JOptionPane.showMessageDialog(popup, "Please enter search criteria");
        }
    }//GEN-LAST:event_searchUserActionPerformed
// Listener for the search user button
    private void searchUserCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserCancelBtnActionPerformed
        setUsers();
    }//GEN-LAST:event_searchUserCancelBtnActionPerformed
// Listener for the add invoice button
    private void addInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInvoiceActionPerformed
        resetInvoiceFields();
        this.setSize(invoiceTabSizeLarge,frameHeight);
        setInvoiceFieldsEditable();
        resetInvoiceButtons();
        addInvoiceBoolean = true;
        setInvoiceLabel();
        setInvoiceComboBoxes();
    }//GEN-LAST:event_addInvoiceActionPerformed
// Listener for the update invoice button
    private void updateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateInvoiceActionPerformed
        if(invoiceTable.getSelectedRow()!= -1){
            setInvoiceComboBoxes();
            int selectedColumn = invoiceTable.getSelectedRow();
            invoiceIdField.setText(invoiceTable.getModel().getValueAt(selectedColumn, 0) + "");
            for(int i=0;i<productIdComboBox.getItemCount();i++){    
                if((invoiceTable.getModel().getValueAt(selectedColumn, 1)+"").compareTo(productIdComboBox.getItemAt(i)+"")==0){
                    productIdComboBox.setSelectedIndex(i);
                }
            }
            for(int i=0;i<customerIdComboBox.getItemCount();i++){
                if((invoiceTable.getModel().getValueAt(selectedColumn, 3)+"").compareTo(customerIdComboBox.getItemAt(i))==0){
                    customerIdComboBox.setSelectedIndex(i);
                }
            }
            invoiceQuantityField.setText(invoiceTable.getModel().getValueAt(selectedColumn, 6) + "");
            invoicePriceField.setText(invoiceTable.getModel().getValueAt(selectedColumn, 7) + "");
            try{
                String tableDate = invoiceTable.getModel().getValueAt(selectedColumn, 8) + "";
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(tableDate);
                invoiceDateField.setDate(date);
            } catch(ParseException e){
                e.printStackTrace();
            }
            
            resetInvoiceButtons();
            setInvoiceFieldsEditable();
            updateInvoiceBoolean = true;
            setInvoiceLabel();
            this.setSize(invoiceTabSizeLarge,frameHeight);
        } else{
            JFrame popup = new JFrame("Error Message");
            JOptionPane.showMessageDialog(popup, "Please select an invoice to update");
        }
    }//GEN-LAST:event_updateInvoiceActionPerformed
// Listener for the delete invoice button
    private void deleteInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteInvoiceActionPerformed
    if(invoiceTable.getSelectedRow()!= -1){
        setInvoiceComboBoxes();
        int selectedColumn = invoiceTable.getSelectedRow();
        
        invoiceIdField.setText(invoiceTable.getModel().getValueAt(selectedColumn, 0) + "");
        for(int i=0;i<productIdComboBox.getItemCount();i++){
            if((invoiceTable.getModel().getValueAt(selectedColumn, 1)+"").compareTo(productIdComboBox.getItemAt(i)+"")==0){
                productIdComboBox.setSelectedIndex(i);
            }
        }
        for(int i=0;i<customerIdComboBox.getItemCount();i++){
            if((invoiceTable.getModel().getValueAt(selectedColumn, 3)+"").compareTo(customerIdComboBox.getItemAt(i))==0){
                customerIdComboBox.setSelectedIndex(i);
            }
        }
        invoiceQuantityField.setText(invoiceTable.getModel().getValueAt(selectedColumn, 6) + "");
        invoicePriceField.setText(invoiceTable.getModel().getValueAt(selectedColumn, 7) + "");
        try{
            String tableDate = invoiceTable.getModel().getValueAt(selectedColumn, 8) + "";
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse(tableDate);
            invoiceDateField.setDate(date);
        } catch(ParseException e){
            e.printStackTrace();
        }

        resetInvoiceButtons();
        deleteInvoiceBoolean = true;
        setInvoiceLabel();
        setInvoiceFieldsUneditable();
        this.setSize(invoiceTabSizeLarge,frameHeight); 
    }
    else{
        JFrame popup = new JFrame("Error Message");
        JOptionPane.showMessageDialog(popup, "Please select an invoice to delete");
    }
    }//GEN-LAST:event_deleteInvoiceActionPerformed
// Listener for the confirm invoice button for add, update or delete
    private void invoiceConfirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceConfirmBtnActionPerformed
        boolean validation = validateInvoice();
        Connection con;
        Statement stm;
        ResultSet result;
        String invoiceId = invoiceIdField.getText();
        String productId = productIdComboBox.getSelectedItem()+"";
        String customerId = customerIdComboBox.getSelectedItem()+"";
        String quantity = invoiceQuantityField.getText();
        String price = invoicePriceField.getText();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date1 = invoiceDateField.getDate();
        String date = dateFormat.format(date1);
        int productQuantity=0;
        if(validation){
            try{
                con = DriverManager.getConnection(database_URL,username, this.dbPassword);
                stm = con.createStatement();
                result = stm.executeQuery("SELECT QuantityInStock FROM product WHERE ProductID = \'"+productId+"\'");
                result.next();
                productQuantity = Integer.parseInt(result.getString(1));
            }catch(SQLException exc){
                resetInvoiceButtons();
                exc.printStackTrace();
            }
        }
        if(updateInvoiceBoolean && validation){
            try{
                int newStock = checkInvoiceUpdate(productId,invoiceId,quantity);
                if(newStock >=0){
                    con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                    stm = con.createStatement();
                    stm.executeUpdate("UPDATE invoice SET ProductID=\'"+productId+"\', CustomerId=\'"+customerId+"\', "
                            + "quantity=\'"+quantity+"\', Price=\'"+price+"\', Date=\'"+date+"\' WHERE InvoiceID="+invoiceId);
                    stm.executeUpdate("UPDATE product SET QuantityInStock=\'"+newStock+"\' WHERE ProductID=\'"+productId+"\'");
                }else{
                    JFrame popup = new JFrame("Quantity Error Message");
                    JOptionPane.showMessageDialog(popup, "There is only " +productQuantity+" of this item left in stock");
                }
            }
            catch(SQLException exc){
            exc.printStackTrace();
        }
            resetInvoiceButtons();
            setInvoices();
            setProducts();
            this.setSize(invoiceTabSizeSmall,frameHeight);
        }
        if(addInvoiceBoolean && validation){
            try{
                if(productQuantity-Integer.parseInt(quantity)>=0){
                    productQuantity-=(Integer.parseInt(quantity));
                    con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                    stm = con.createStatement();
                    stm.executeUpdate("INSERT INTO invoice ( ProductID, CustomerId, quantity, Price, Date)"
                            + " Values (\'"+productId+"\', \'"+customerId+"\', \'"+quantity+"\', \'"+price+"\', \'"+date+"/')");
                    stm.executeUpdate("UPDATE product SET QuantityInStock=\'"+productQuantity+"\' WHERE ProductID=\'"+productId+"\'");
                }else{
                    JFrame popup = new JFrame("Quantity Error Message");
                    JOptionPane.showMessageDialog(popup, "There is only " +productQuantity+" of this item left in stock");
                }
            }
            catch(SQLException exc){
            exc.printStackTrace();
        }
            resetInvoiceButtons();
            setInvoices();
            setProducts();
            this.setSize(invoiceTabSizeSmall,frameHeight);
        }
        if(deleteInvoiceBoolean){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("DELETE FROM invoice WHERE InvoiceId="+invoiceId);
            }
            catch(SQLException exc){
                exc.printStackTrace();
            }
            resetInvoiceButtons();
            setInvoices();
            this.setSize(invoiceTabSizeSmall,frameHeight);
        }
    }//GEN-LAST:event_invoiceConfirmBtnActionPerformed
// Listener for the cancel invoice button for add, update or delete
    private void invoiceCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceCancelBtnActionPerformed
        resetInvoiceButtons();
        this.setSize(invoiceTabSizeSmall, frameHeight);
    }//GEN-LAST:event_invoiceCancelBtnActionPerformed
// Listener for the search invoice button
    private void searchInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchInvoiceActionPerformed
        if(searchInvoiceField.getText().compareTo("")!=0){
            String searchCategory = invoiceSearchComboBox.getSelectedItem() + "";
            String searchString = searchInvoiceField.getText();
            searchCategory = searchCategory.replaceAll("\\s+","");
            resetInvoiceButtons();
            Connection con;
            Statement stm;
            ResultSet result;
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                result = stm.executeQuery(
                        "SELECT invoice.*,product.Name,customers.FirstName,customers.LastName "
                            + "FROM invoice "
                            + "INNER JOIN product ON invoice.ProductID = product.ProductID "
                            + "INNER JOIN customers ON invoice.CustomerId = customers.CustomersID "
                            + "WHERE "+searchCategory+"=\'"+searchString+"\'");
                setInvoiceTable(result);
            }
            catch(SQLException exc){
                exc.printStackTrace();
            }
            resetInvoiceButtons();
        }
        else{
            JFrame popup = new JFrame("Error Message");
            JOptionPane.showMessageDialog(popup, "Please enter search criteria");
        }
    }//GEN-LAST:event_searchInvoiceActionPerformed
// Listener for the cancel invoice search button
    private void cancelInvoiceSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelInvoiceSearchActionPerformed
        setInvoices();
    }//GEN-LAST:event_cancelInvoiceSearchActionPerformed
// Listener for the confirm user button for add, delete or update
    private void userConfirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userConfirmBtnActionPerformed
        boolean validation = validateUser();
        Connection con;
        Statement stm;
        ResultSet result;
        String id = userIdField.getText();
        String username  = userUsernameField.getText();
        String password = userPasswordField.getText();
        String firstName = userFirstNameField.getText();
        String lastName = userLastNameField.getText();
        String email = userEmailField.getText();
        String phone = userPhoneField.getText();
        String address = userAddressField.getText();
        String city = userCityField.getText();
        String county;
        if((userCountryComboBox.getSelectedItem()+"").compareTo("Ireland")==0){
            county = userCountyComboBox.getSelectedItem()+"";
        } else {
            county = "";
        }
        String country = userCountryComboBox.getSelectedItem()+"";
        String gender;
        if(maleBtn.getSelectedObjects()!=null){
            gender = "Male";
        } else {
            gender="Female";
        }
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date dob = userDOBField.getDate();
        String dateOfBirth = dateFormat.format(dob);
        
        if(updateUserBoolean && validation){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("UPDATE users SET UserName=\'"+username+"\', Password=\'"+password+"\', FirstName=\'"+firstName+"\', LastName=\'"+lastName+"\', Email=\'"+email+"\', PhoneNo=\'"+phone+"\', Address=\'"+address+"\', City=\'"+city+"\', County=\'"+county+"\', Country=\'"+country+"\', Gender=\'"+gender+"\', DateOB=\'"+dateOfBirth+"\' WHERE UsersID="+id);
            }
            catch(SQLException exc){
            exc.printStackTrace();
                }
            resetUserButtons();
            setUsers();
            this.setSize(userTabSizeSmall,frameHeight);
        }
        if(addUserBoolean && validation){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("INSERT INTO users ( UserName, Password, FirstName, LastName, Email, PhoneNo, Address, City, County, Country, Gender, DateOB)"
                        + " Values (\'"+username+"\', \'"+password+"\', \'"+firstName+"\', \'"+lastName+"\', \'"+email+"\', \'"+phone+"\', \'"+address+"\', \'"+city+"\', \'"+county+"\', \'"+country+"\', \'"+gender+"\', \'"+dateOfBirth+"\')");
            }
            catch(SQLException exc){
                exc.printStackTrace();
            }
            resetUserButtons();
            setUsers();
            this.setSize(userTabSizeSmall,frameHeight);
        }
        if(deleteUserBoolean){
            try{
                con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
                stm = con.createStatement();
                stm.executeUpdate("DELETE FROM users WHERE UsersID="+id);
            }
            catch(SQLException exc){
                exc.printStackTrace();
            }
            resetUserButtons();
            setUsers();
            this.setSize(userTabSizeSmall,frameHeight);
        }
        
    }//GEN-LAST:event_userConfirmBtnActionPerformed
// Sets the action for country combo box
    private void userCountryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userCountryComboBoxActionPerformed
        if((userCountryComboBox.getSelectedItem()+"").compareTo("Ireland")==0){
            countyLabel.setVisible(true);
            userCountyComboBox.setVisible(true);
        } else {
            countyLabel.setVisible(false);
            userCountyComboBox.setVisible(false);
        }
    }//GEN-LAST:event_userCountryComboBoxActionPerformed
// Sets the county field visible or invisible depending on the selected country
    private void customerCountryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerCountryComboBoxActionPerformed
        if((customerCountryComboBox.getSelectedItem()+"").compareTo("Ireland")==0){
            customerCountyComboBox.setVisible(true);
            customerCountyLabel.setVisible(true);
        } else{
            customerCountyComboBox.setVisible(false);
            customerCountyLabel.setVisible(false);
        }
    }//GEN-LAST:event_customerCountryComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    /**
     * Sets the product Table
     */
    public void setProducts(){
        Object[][] productTableData =new Object[productTable.getRowCount()+1][5];
        Connection con;
        Statement stm;
        ResultSet result;
        int i=0;
        try{
            con = DriverManager.getConnection(database_URL,username, dbPassword);
            stm = con.createStatement();
            result=stm.executeQuery("SELECT * FROM product");
            productTableData =new Object[countRows(result)][5];
            result=stm.executeQuery("SELECT * FROM product");
            while (result.next()){
                productTableData[i][0] = result.getString(1);
                productTableData[i][1]= result.getString(2);
                productTableData[i][2]= result.getString(3);
                productTableData[i][3]= result.getString(4);
                productTableData[i][4]= result.getString(5);
                i++;
            }
        }
        catch(SQLException exc){
            exc.printStackTrace();
        }
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            productTableData,
            new String [] {
                "Product ID", "Name", "Quantity in Box", "Price", "Quantity in Stock"
            }
        ));
    }

    /**
     *  Sets the product Table after a search
     * @param result boolean
     */
    public void setProducts(ResultSet result){
        int i=0;
        Object[][] productTableData =new Object[productTable.getRowCount()][5];
        try{
            while (result.next()){
                productTableData[i][0] = result.getString(1);
                productTableData[i][1]= result.getString(2);
                productTableData[i][2]= result.getString(3);
                productTableData[i][3]= result.getString(4);
                productTableData[i][4]= result.getString(5);
                i++;
            }
        }catch(SQLException exc){
            exc.printStackTrace();
        }
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            productTableData,
            new String [] {
                "Product ID", "Name", "Quantity in Box", "Price", "Quantity in Stock"
            }
        ));
    }

    /**
     * Resets the buttons booleans for the confirm button
     */
    public void resetProductButtons(){
        deleteProductBoolean = false;
        addProductBoolean = false;
        updateProductBoolean = false;
    }    

    /**
     * Sets the products label in the confirmation window
     */
    public void setProductLabel(){
        if (addProductBoolean){
            productLabel.setText("Are you sure you want to add this product");
        }
        if (deleteProductBoolean){
            productLabel.setText("Are you sure you want to delete this product");
        }
        if (updateProductBoolean){
            productLabel.setText("Are you sure you want to Update this product");
        }
    }
    /**
     * Sets the values for the Product Search Combo box
     */
    public void setProductComboBox(){
        for(int i=0;i<productTable.getColumnCount();i++){
            searchProductComboBox.addItem(productTable.getColumnName(i));
        }   
    }

    /**
     * Sets the product fields to empty
     */
    public void resetProductFields(){
        productIdField.setText("");
        productNameField.setText("");
        productQuantityInBoxField.setText("");
        productPriceField.setText("");
        productQuantityInStockField.setText("");
    }

    /**
     * Makes the Jfields in product tab editable
     */
    public void setProductFieldsEditable(){
        productIdField.setVisible(false);
        productIdLabel.setVisible(false);
        productIdField.setEditable(false);
        productNameField.setEditable(true);
        productQuantityInBoxField.setEditable(true);
        productPriceField.setEditable(true);
        productQuantityInStockField.setEditable(true);
    }

    /**
     * Makes the Jfields in product tab uneditable
     */
    public void setProductFieldsUneditable(){
        productIdField.setVisible(true);
        productIdLabel.setVisible(true);
        productIdField.setEditable(false);
        productNameField.setEditable(false);
        productQuantityInBoxField.setEditable(false);
        productPriceField.setEditable(false);
        productQuantityInStockField.setEditable(false);
    }

    /**
     * Validates the data entered for product add and update
     * @return boolean
     */
    public boolean validateProduct(){
        if(!validateProductName()){
            return false;
        }
        if(!validateProductPrice()){
            return false;
        }
        if(!validateProductQIB()){
            return false;
        }
        if(!validateProductQIS()){
            return false;
        }
        return true;
    }
    /**
     * Validates the name field for the product tab
     * @return boolean
     */
    public boolean validateProductName(){
        boolean output=true;
        String name = productNameField.getText();
        
        if(name.length() == 0){
            JFrame frame = new JFrame("Name Field Error");
            JOptionPane.showMessageDialog(frame, "Name Field is Required");
            output = false;
        }
        return output;
    }
    /**
     * Validates the price field for the product tab
     * @return boolean
     */
    public boolean validateProductPrice(){
        boolean output=true;
        String price = productPriceField.getText();
        
        if(price.length() == 0){
            JFrame frame = new JFrame("Price Field Error");
            JOptionPane.showMessageDialog(frame, "Price Field is Required");
            output = false;
        }
        try{
            Float.parseFloat(price);
        }catch(NumberFormatException e){
            JFrame frame = new JFrame("Price Field Error");
            JOptionPane.showMessageDialog(frame, "Price Field only accepts Numbers");
            output = false;
        }
        return output;
    }
    /**
     * Validates the quantity in box field for product tab
     * @return boolean
     */
    public boolean validateProductQIB(){
        boolean output=true;
        String quantity = productQuantityInBoxField.getText();
        
        if(quantity.length() == 0){
            JFrame frame = new JFrame("Quantity in Box Field Error");
            JOptionPane.showMessageDialog(frame, "Quantity in Box Field is Required");
            output = false;
        }
        try{
            Integer.parseInt(quantity);
        }catch(NumberFormatException e){
            JFrame frame = new JFrame("Quantity in Box Field Error");
            JOptionPane.showMessageDialog(frame, "Quantity in Box Field only accepts Numbers");
            output = false;
        }
        return output;
    }
    /**
     * Validates the Quantity in stock field for product tab
     * @return boolean
     */
    public boolean validateProductQIS(){
        boolean output=true;
        String quantity = productQuantityInStockField.getText();
        
        if(quantity.length() == 0){
            JFrame frame = new JFrame("Quantity in Stock Field Error");
            JOptionPane.showMessageDialog(frame, "Quantity in Box Field is Required");
            output = false;
        }
        try{
            Integer.parseInt(quantity);
        }catch(NumberFormatException e){
            JFrame frame = new JFrame("Quantity in Stock Field Error");
            JOptionPane.showMessageDialog(frame, "Quantity in Box Field only accepts Numbers");
            output = false;
        }
        return output;
    }

    /**
     * Sets the customer table
     */
    public void setCustomerTable(){
        Object[][] customerTableData = new Object[1][8];;
        Connection con;
        Statement stm;
        ResultSet result;
        int i=0;
        try{
            con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
            stm = con.createStatement();
            result=stm.executeQuery("SELECT * FROM customers");
            customerTableData =new Object[countRows(result)][8];
            result=stm.executeQuery("SELECT * FROM customers");
            while (result.next()){
                customerTableData[i][0] = result.getString(1);
                customerTableData[i][1]= result.getString(2);
                customerTableData[i][2]= result.getString(3);
                customerTableData[i][3]= result.getString(4);
                customerTableData[i][4]= result.getString(5);
                customerTableData[i][5]= result.getString(6);
                customerTableData[i][6]= result.getString(7);
                customerTableData[i][7]= result.getString(8);
                i++;
            }
        }
        catch(SQLException exc){
            exc.printStackTrace();
        }
        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            customerTableData,
            new String [] {
                "Customers ID", "First Name", "Last Name", "Phone Number", "Address",
                "City", "County", "Country"
            }
        ));
        customerTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }
    /**
     * Sets the customer table after a search
     * @param result a result of the search query
     */
    public void setCustomerTable(ResultSet result){
        Object[][] customerTableData =new Object[customerTable.getRowCount()][8];
        int i=0;
        try{
            while (result.next()){
                customerTableData[i][0] = result.getString(1);
                customerTableData[i][1]= result.getString(2);
                customerTableData[i][2]= result.getString(3);
                customerTableData[i][3]= result.getString(4);
                customerTableData[i][4]= result.getString(5);
                customerTableData[i][5]= result.getString(6);
                customerTableData[i][6]= result.getString(7);
                customerTableData[i][7]= result.getString(8);
                i++;
            }
        }
        catch(SQLException exc){
            exc.printStackTrace();
        }
        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            customerTableData,
            new String [] {
                "Customers ID", "First Name", "Last Name", "Phone Number", "Address",
                "City", "County", "Country"
            }
        ));
        customerTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }
    /**
     * Sets the combo box on the customer Tab
     */
    public void setCustomerComboBox(){
        for(int i=0;i<customerTable.getColumnCount();i++){
            searchCustomerComboBox.addItem(customerTable.getColumnName(i));
        }   
    }
    /**
     * Sets the customer label in the confirmation window
     */
    public void setCustomerLabel(){
        if (addCustomerBoolean){
            customerLabel.setText("Are you sure you want to add this customer");
        }
        if (deleteCustomerBoolean){
            customerLabel.setText("Are you sure you want to delete this customer");
        }
        if (updateCustomerBoolean){
            customerLabel.setText("Are you sure you want to Update this customer");
        }
    }

    /**
     * Resets the customer fields to empty
     */
    public void resetCustomerFields(){
        customerIdField.setText("");
        customerFirstNameField.setText("");
        customerLastNameField.setText("");
        customerPhoneField.setText("");
        customerAddressField.setText("");
        customerCityField.setText("");
        customerCountyComboBox.setSelectedItem(0);
        customerCountryComboBox.setSelectedItem(0);
    }

    /**
     * Resets the customer button booleans
     */
    public void resetCustomerButtons(){
        deleteCustomerBoolean = false;
        addCustomerBoolean = false;
        updateCustomerBoolean = false;
    } 

    /**
     * Makes the Jfields in Customer tab editable
     */
    public void setCustomerFieldsEditable(){
        customerIdLabel.setVisible(false);
        customerIdField.setVisible(false);
        customerFirstNameField.setEditable(true);
        customerLastNameField.setEditable(true);
        customerPhoneField.setEditable(true);
        customerAddressField.setEditable(true);
        customerCityField.setEditable(true);
        customerCountyComboBox.setEnabled(true);
        customerCountryComboBox.setEnabled(true);
    }
    /**
     * Makes the Jfields in Customer tab uneditable
     */
    public void setCustomerFieldsUneditable(){
        customerIdLabel.setVisible(true);
        customerIdField.setVisible(true);
        customerIdField.setEditable(false);
        customerFirstNameField.setEditable(false);
        customerLastNameField.setEditable(false);
        customerPhoneField.setEditable(false);
        customerAddressField.setEditable(false);
        customerCityField.setEditable(false);
        customerCountyComboBox.setEnabled(false);
        customerCountryComboBox.setEnabled(false);
    }
    /**
     * Validates the fields in the customer tab
     * @return boolean
     */
    public boolean validateCustomer(){
        if(!validateCustomerFName()){
            return false;
        }
        if(!validateCustomerLName()){
            return false;
        }
        if(!validateCustomerPhone()){
            return false;
        }
        if(!validateCustomerAddress()){
            return false;
        }
        if(!validateCustomerCity()){
            return false;
        }
        return true;
    }

    /**
     * Validates the customer first name in the customer tab
     * @return boolean
     */
    public boolean validateCustomerFName(){
        boolean output=true;
        String name = customerFirstNameField.getText();
        
        if(name.length() == 0){
            JFrame frame = new JFrame("First Name Field Error");
            JOptionPane.showMessageDialog(frame, "First Name Field is Required");
            output = false;
        }
        return output;
    }

    /**
     * Validates the customer last name in the customer tab
     * @return boolean
     */
    public boolean validateCustomerLName(){
        boolean output=true;
        String name = customerLastNameField.getText();
        
        if(name.length() == 0){
            JFrame frame = new JFrame("Last Name Field Error");
            JOptionPane.showMessageDialog(frame, "Last Name Field is Required");
            output = false;
        }
        return output;
    }
    /**
     * Validates the phone number in the customer tab
     * @return boolean
     */
    public boolean validateCustomerPhone(){
       boolean output = true;
        String phoneNo = customerPhoneField.getText();
        
        if(phoneNo.length()==0){
            JFrame frame = new JFrame("Phone Field Error");
            JOptionPane.showMessageDialog(frame, "Phone number field is required");
            output = false;
        } if(!checkPhone() && output){
            JFrame frame = new JFrame("Phone Field Error");
            JOptionPane.showMessageDialog(frame, "Phone number can only contain numbers and special characters");
            output=false;
        }
        return output;
    }

    /**
     * Checks whether the phone field contains letters
     * @return boolean
     */
    public boolean checkPhone(){
        boolean output = true;
        String phone = customerPhoneField.getText();
        for(int i=0;i<phone.length();i++){
            if((phone.charAt(i)>='a' && phone.charAt(i)<='z')||(phone.charAt(i)>='A' && phone.charAt(i)<='Z')){
                output=false;
            }
        }
        return output;
    }

    /**
     * Validates the customer Address in the customer tab
     * @return boolean
     */
    public boolean validateCustomerAddress(){
        boolean output=true;
        String name = customerAddressField.getText();
        
        if(name.length() == 0){
            JFrame frame = new JFrame("Address Field Error");
            JOptionPane.showMessageDialog(frame, "Address Field is Required");
            output = false;
        }
        return output;
    }
    /**
     * Validates the customer city in the customer tab
     * @return boolean
     */
    public boolean validateCustomerCity(){
        boolean output=true;
        String name = customerCityField.getText();
        
        if(name.length() == 0){
            JFrame frame = new JFrame("City Field Error");
            JOptionPane.showMessageDialog(frame, "City Field is Required");
            output = false;
        }
        return output;
    }
    /**
     * Sets the user Table
     */
    public void setUsers(){
        Object[][] userTableData =new Object[userTable.getRowCount()][13];
        Connection con;
        Statement stm;
        ResultSet result;
        int i=0;
        try{
            con = DriverManager.getConnection(database_URL,username, dbPassword);
            stm = con.createStatement();
            result=stm.executeQuery("SELECT * FROM users");
            userTableData =new Object[countRows(result)][13];
            result=stm.executeQuery("SELECT * FROM users");
            while (result.next()){
                userTableData[i][0] = result.getString(1);
                userTableData[i][1]= result.getString(2);
                userTableData[i][2]= result.getString(3);
                userTableData[i][3]= result.getString(4);
                userTableData[i][4]= result.getString(5);
                userTableData[i][5]= result.getString(6);
                userTableData[i][6]= result.getString(7);
                userTableData[i][7]= result.getString(8);
                userTableData[i][8]= result.getString(9);
                userTableData[i][9]= result.getString(10);
                userTableData[i][10]= result.getString(11);
                userTableData[i][11]= result.getString(12);
                userTableData[i][12]= result.getString(13);
                i++;
            }
        }
        catch(SQLException exc){
            exc.printStackTrace();
        }
        userTable.setModel(new javax.swing.table.DefaultTableModel(
            userTableData,
            new String [] {
                "Users ID", "User Name", "Password", "First Name", "Last Name", "Email",
                "Phone Number", "Address", "City","County","Country","Gender","Date Of Birth"
            }
        ));
        userTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }
    /**
     * Sets the user table after a search
     * @param result a result of the search Query
     */
    public void setUserTable(ResultSet result){
        Object[][] userTableData =new Object[userTable.getRowCount()][13];
        int i=0;
        try{
            while (result.next()){
                userTableData[i][0] = result.getString(1);
                userTableData[i][1]= result.getString(2);
                userTableData[i][2]= result.getString(3);
                userTableData[i][3]= result.getString(4);
                userTableData[i][4]= result.getString(5);
                userTableData[i][5]= result.getString(6);
                userTableData[i][6]= result.getString(7);
                userTableData[i][7]= result.getString(8);
                userTableData[i][8]= result.getString(9);
                userTableData[i][9]= result.getString(10);
                userTableData[i][10]= result.getString(11);
                userTableData[i][11]= result.getString(12);
                userTableData[i][12]= result.getString(13);
                i++;
            }
        }
        catch(SQLException exc){
            exc.printStackTrace();
        }
        userTable.setModel(new javax.swing.table.DefaultTableModel(
            userTableData,
            new String [] {
                "Users ID", "User Name", "Password", "First Name", "Last Name", "Email",
                "Phone Number", "Address", "City","County","Country","Gender","Date Of Birth"
            }
        ));
        userTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }
    /**
     * Sets the values for the user combo box
     */
    public void setUserComboBox(){
        for(int i=0;i<userTable.getColumnCount();i++){
            searchUserComboBox.addItem(userTable.getColumnName(i));
        }   
    }
    /**
     * Sets the invoice label in the confirmation window
     */
    public void setUserLabel(){
        if (addInvoiceBoolean){
            userLabel.setText("Are you sure you want to add this User");
        }
        if (deleteInvoiceBoolean){
            userLabel.setText("Are you sure you want to delete this User");
        }
        if (updateInvoiceBoolean){
            userLabel.setText("Are you sure you want to Update this User");
        }
    }
    /**
     * Resets the user fields to empty
     */
    public void resetUserFields(){
        invoiceIdField.setText("");
        userUsernameField.setText("");
        userPasswordField.setText("");
        userFirstNameField.setText("");
        userLastNameField.setText("");
        userEmailField.setText("");
        userPhoneField.setText("");
        userAddressField.setText("");
        userCityField.setText("");
        userCountyComboBox.setSelectedIndex(1);
        userCountryComboBox.setSelectedIndex(1);
        maleBtn.setSelected(true);
        Date date = new Date("01/01/2000");
        userDOBField.setDate(date);
    }
    /**
     * Resets the user button booleans
     */
    public void resetUserButtons(){
        deleteUserBoolean = false;
        addUserBoolean = false;
        updateUserBoolean = false;
    } 
    /**
     * Makes the Jfields in Customer tab editable
     */
    public void setUserFieldsEditable(){
        userIdLabel.setVisible(false);
        userIdField.setVisible(false);
        userUsernameField.setEditable(true);
        userPasswordField.setEditable(true);
        userFirstNameField.setEditable(true);
        userLastNameField.setEditable(true);
        userEmailField.setEditable(true);
        userPhoneField.setEditable(true);
        userAddressField.setEditable(true);
        userCityField.setEditable(true);
        userCountyComboBox.setEnabled(true);
        userCountryComboBox.setEnabled(true);
        maleBtn.setEnabled(true);
        femaleBtn.setEnabled(true);
        userDOBField.setEnabled(true);
    }
    /**
     * Makes the Jfields in Customer tab uneditable
     */
    public void setUserFieldsUneditable(){
        userIdLabel.setVisible(true);
        userIdField.setVisible(true);
        userIdField.setEditable(false);
        userUsernameField.setEditable(false);
        userPasswordField.setEditable(false);
        userFirstNameField.setEditable(false);
        userLastNameField.setEditable(false);
        userEmailField.setEditable(false);
        userPhoneField.setEditable(false);
        userAddressField.setEditable(false);
        userCityField.setEditable(false);
        userCountyComboBox.setEnabled(false);
        userCountryComboBox.setEnabled(false);
        maleBtn.setEnabled(false);
        femaleBtn.setEnabled(false);
        userDOBField.setEnabled(false);
    }
    /**
     * Validates the data entered into the user tab
     * @return boolean
     */
    public boolean validateUser(){
        if(!validateUserUsername()){
            return false;
        }
        if(!validateUserPassword()){
            return false;
        }
        if(!validateUserFName()){
            return false;
        }
        if(!validateUserLName()){
            return false;
        }
        if(!validateUserEmail()){
            return false;
        }
        if(!validateUserPhone()){
            return false;
        }
        if(!validateUserAddress()){
            return false;
        }
        if(!validateUserCity()){
            return false;
        }
        return true;
    } 
    /**
     * Validates the username field in the user tab
     * @return boolean
     */
    public boolean validateUserUsername(){
        boolean output=true;
        String name = userUsernameField.getText();
        
        if(name.length() == 0){
            JFrame frame = new JFrame("Username Field Error");
            JOptionPane.showMessageDialog(frame, "Username Field is Required");
            output = false;
        }
        return output;
    }
    /**
     * Validates the password field the user tab
     * @return boolean
     */
    public boolean validateUserPassword(){
        boolean output=true;
        String name = userPasswordField.getText();
        
        if(name.length() == 0){
            JFrame frame = new JFrame("Password Field Error");
            JOptionPane.showMessageDialog(frame, "Password Field is Required");
            output = false;
        } else if(checkPassword()==false && output==true){
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "The Password requires 5 letters, 2 numbers and a special character");
            output = false;
        }
        return output;
    }
    /**
     * Checks whether the password has the required security
     * @return boolean
     */
    public boolean checkPassword(){
        boolean output=false;
        int letterCount=0;
        int numberCount=0;
        int specialCharCount=0;
        String password = userPasswordField.getText();
        for(int i=0;i<password.length();i++){
            if((password.charAt(i)>='a'&&password.charAt(i)<='z')||(password.charAt(i)>='A'&&password.charAt(i)<='Z')){
                letterCount++;
            } else if(password.charAt(i)>='0' && password.charAt(i)<='9'){
                numberCount++;
            } else if((password.charAt(i)>=33 && password.charAt(i)<=47)||(password.charAt(i)>=58 && password.charAt(i)<=63)
                    ||(password.charAt(i)>=91 && password.charAt(i)<=96
                    ||(password.charAt(i)>=123 && password.charAt(i)<=126))){
                specialCharCount++;
            }
        }
        if(letterCount>=5 && numberCount >= 2 && specialCharCount >=1){
            output=true;
        }
        return output;
    }
    /**
     * Validates the first name field in the user tab
     * @return boolean
     */
    public boolean validateUserFName(){
        boolean output=true;
        String name = userFirstNameField.getText();
        
        if(name.length() == 0){
            JFrame frame = new JFrame("First Name Field Error");
            JOptionPane.showMessageDialog(frame, "First Name Field is Required");
            output = false;
        }
        return output;
    }
    /**
     * Validates the last name field in the user tab
     * @return boolean
     */
    public boolean validateUserLName(){
        boolean output=true;
        String name = userLastNameField.getText();
        
        if(name.length() == 0){
            JFrame frame = new JFrame("Last Name Field Error");
            JOptionPane.showMessageDialog(frame, "Last Name Field is Required");
            output = false;
        }
        return output;
    }
    /**
     * Validates the Email field in the user tab
     * @return boolean
     */
    public boolean validateUserEmail(){
        boolean output = true;
        String email = userEmailField.getText();
        
        if(email.length() == 0){
            JFrame frame = new JFrame("Emai Field Error");
            JOptionPane.showMessageDialog(frame, "Email Field is Required");
            output = false;
        } else if(email.compareTo("")==0 && output==true){
            JFrame frame = new JFrame("Email Field Error");
            JOptionPane.showMessageDialog(frame, "The Email Field is required");
            output = false;
        }
        return output;
    }
    /**
     * Validates the phone field in the user tab
     * @return boolean
     */
    public boolean validateUserPhone(){
        boolean output = true;
        String phoneNo = userPhoneField.getText();
        
        if(phoneNo.length()==0){
            JFrame frame = new JFrame("Phone Field Error");
            JOptionPane.showMessageDialog(frame, "Phone number field is required");
            output = false;
        } if(!UserCheckPhone() && output){
            JFrame frame = new JFrame("Phone Field Error");
            JOptionPane.showMessageDialog(frame, "Phone number can only contain numbers and special characters");
            output=false;
        }
        return output;
    }
    /**
     * Checks the format of a phone
     * @return boolean
     */
    public boolean UserCheckPhone(){
        boolean output = true;
        String phone = userPhoneField.getText();
        for(int i=0;i<phone.length();i++){
            if((phone.charAt(i)>='a' && phone.charAt(i)<='z')||(phone.charAt(i)>='A' && phone.charAt(i)<='Z')){
                output=false;
            }
        }
        return output;
    }
    /**
     * Validates the address field in the user tab
     * @return boolean
     */
    public boolean validateUserAddress(){
        boolean output = true;
        String address = userAddressField.getText();
        
        if(address.length()==0){
            JFrame frame = new JFrame("Address Field Error");
            JOptionPane.showMessageDialog(frame, "Address field is required");
            output = false;
        }
        return output;
    }
    /**
     * Validates the city field in the user tab
     * @return boolean
     */
    public boolean validateUserCity(){
        boolean output = true;
        String city = userCityField.getText();
        
        if(city.length()==0){
            JFrame frame = new JFrame("City Field Error");
            JOptionPane.showMessageDialog(frame, "City field is required");
            output = false;
        }
        return output;
    }
    /**
     * Sets the invoice Table
     */
    public void setInvoices(){
        Object[][] invoiceTableData =new Object[invoiceTable.getRowCount()][9];
        Connection con;
        Statement stm;
        ResultSet result;
        int i=0;
        try{
            con = DriverManager.getConnection(database_URL,username, dbPassword);
            stm = con.createStatement();
            result=stm.executeQuery(
                    "SELECT invoice.*,product.Name,customers.FirstName,customers.LastName "
                            + "FROM invoice "
                            + "INNER JOIN product ON invoice.ProductID = product.ProductID "
                            + "INNER JOIN customers ON invoice.CustomerId = customers.CustomersID");
            invoiceTableData =new Object[countRows(result)][9];
            result=stm.executeQuery("SELECT invoice.*,product.Name,customers.FirstName,customers.LastName "
                            + "FROM invoice "
                            + "INNER JOIN product ON invoice.ProductID = product.ProductID "
                            + "INNER JOIN customers ON invoice.CustomerId = customers.CustomersID");
            while (result.next()){
                invoiceTableData[i][0] = result.getString(1);
                invoiceTableData[i][1]= result.getString(2);
                invoiceTableData[i][3]= result.getString(3);
                invoiceTableData[i][6]= result.getString(4);
                invoiceTableData[i][7]= result.getString(5);
                invoiceTableData[i][8]= result.getString(6);
                invoiceTableData[i][2]= result.getString(7);
                invoiceTableData[i][4]= result.getString(8);
                invoiceTableData[i][5]= result.getString(9);
                i++;
            }
        }
        catch(SQLException exc){
            exc.printStackTrace();
        }
        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            invoiceTableData,
            new String [] {
                "Invoice ID", "Product ID", "Product Name", "Customer ID","First Name", "Last Name",  "Quantity", "Price", "Date"
            }
        ));
    }
    /**
     * Sets the invoice table after an invoice search
     * @param result a result of the search Query
     */
    public void setInvoiceTable(ResultSet result){
        Object[][] invoiceTableData =new Object[invoiceTable.getRowCount()][9];
        int i=0;
        try{
            while (result.next()){
                invoiceTableData[i][0] = result.getString(1);
                invoiceTableData[i][1]= result.getString(2);
                invoiceTableData[i][3]= result.getString(3);
                invoiceTableData[i][6]= result.getString(4);
                invoiceTableData[i][7]= result.getString(5);
                invoiceTableData[i][8]= result.getString(6);
                invoiceTableData[i][2]= result.getString(7);
                invoiceTableData[i][4]= result.getString(8);
                invoiceTableData[i][5]= result.getString(9);
                i++;
            }
        }
        catch(SQLException exc){
            exc.printStackTrace();
        }
        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            invoiceTableData,
            new String [] {
                "Invoice ID", "Product ID", "Customer ID","First Name", "Last Name", "Name", "Quantity", "Price", "Date"
            }
        ));
    } 
    /**
     * Sets the user label in the confirmation window
     */
    public void setInvoiceLabel(){
        if (addInvoiceBoolean){
            invoiceLabel.setText("Are you sure you want to add this invoice");
        }
        if (deleteInvoiceBoolean){
            invoiceLabel.setText("Are you sure you want to delete this invoice");
        }
        if (updateInvoiceBoolean){
            invoiceLabel.setText("Are you sure you want to Update this invoice");
        }
    } 
    /**
     * Resets the invoice fields to empty
     */
    public void resetInvoiceFields(){
        invoiceIdField.setText("");
        productIdComboBox.setSelectedIndex(0);
        customerIdComboBox.setSelectedIndex(0);
        invoiceQuantityField.setText("");
        invoicePriceField.setText("");
        Date date = new Date("01/01/2000");
        invoiceDateField.setDate(date);
    }

    /**
     * Resets the user button booleans
     */
    public void resetInvoiceButtons(){
        deleteInvoiceBoolean = false;
        addInvoiceBoolean = false;
        updateInvoiceBoolean = false;
    } 

    /**
     * Makes the Jfields in Customer tab editable
     */
    public void setInvoiceFieldsEditable(){
        invoiceIdLabel.setVisible(false);
        invoiceIdField.setVisible(false);
        productIdComboBox.setEnabled(true);
        customerIdComboBox.setEnabled(true);
        invoiceQuantityField.setEnabled(true);
        invoicePriceField.setEditable(true);
        invoiceDateField.setEnabled(true);
    }
    /**
     * Makes the Jfields in Customer tab uneditable
     */
    public void setInvoiceFieldsUneditable(){
        invoiceIdLabel.setVisible(true);
        invoiceIdField.setVisible(true);
        invoiceIdField.setEditable(false);
        productIdComboBox.setEnabled(false);
        customerIdComboBox.setEnabled(false);
        invoiceQuantityField.setEditable(false);
        invoicePriceField.setEditable(false);
        invoiceDateField.setEnabled(false);
    }
    /**
     * Sets the combo boxes on the Invoice tab
     */
    public void setInvoiceComboBoxes(){
        Connection con;
        Statement stmProduct;
        Statement stmCustomers;
        ResultSet resultProduct;
        ResultSet resultCustomer;
        String productIds="";
        String customerIds="";
        String[] productIdsArray;
        String[] customerIdsArray;
        productIdComboBox.removeAllItems();
        customerIdComboBox.removeAllItems();
        try{
            con = DriverManager.getConnection(this.database_URL,this.username, this.dbPassword);
            stmProduct = con.createStatement();
            stmCustomers = con.createStatement();
            resultProduct=stmProduct.executeQuery("SELECT ProductID FROM product");
            resultCustomer=stmCustomers.executeQuery("SELECT CustomersID FROM customers");
            while(resultProduct.next()){
                productIds += resultProduct.getString(1)+",";
            }
            while(resultCustomer.next()){
                customerIds += resultCustomer.getString(1)+",";
            }
            productIdsArray = productIds.split(",");
            customerIdsArray = customerIds.split(",");
            for(int i=0;i<productIdsArray.length;i++){
                productIdComboBox.addItem(productIdsArray[i]);
            }
            for(int i=0;i<customerIdsArray.length;i++){
                customerIdComboBox.addItem(customerIdsArray[i]);
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
        for(int i=0;i<invoiceTable.getColumnCount();i++){
            invoiceSearchComboBox.addItem(invoiceTable.getColumnName(i));
        }   
    }
    /**
     * Validates the fields in the invoice tab for add and update operations
     * @return boolean
     */
    public boolean validateInvoice(){
        if(!validateInvoiceQuantity()){
            return false;
        }
        if(!validateInvoicePrice()){
            return false;
        }
        if(!validateInvoiceCId()){
            return false;
        }
        if(!validateInvoicePId()){
            return false;
        }
        return true;
    }
    /**
     * Validates the quantity field in the invoice tab
     * @return
     */
    public boolean validateInvoiceQuantity(){
        boolean output=true;
        String quantity = invoiceQuantityField.getText();
        
        if(quantity.length() == 0){
            JFrame frame = new JFrame("Quantity Field Error");
            JOptionPane.showMessageDialog(frame, "Quantity Field is Required");
            output = false;
        }
        else {
            try{
                Integer.parseInt(quantity);
            }catch(NumberFormatException e){
                JFrame frame = new JFrame("Quantity Field Error");
                JOptionPane.showMessageDialog(frame, "Quantity Field only accepts Numbers");
                output = false;
            }   
        }
        return output;
    }
    /**
     * Validates the price field in the invoice tab
     * @return boolean
     */
    public boolean validateInvoicePrice(){
        boolean output=true;
        String price = invoiceQuantityField.getText();
        
        if(price.length() == 0){
            JFrame frame = new JFrame("Price Field Error");
            JOptionPane.showMessageDialog(frame, "Price Field is Required");
            output = false;
        }
        else {
            try{
                Float.parseFloat(price);
            }catch(NumberFormatException e){
                JFrame frame = new JFrame("Price Field Error");
                JOptionPane.showMessageDialog(frame, "Price Field only accepts Numbers");
                output = false;
            }   
        }
        return output;
    }
    /**
     * Validates the Customer Id Combo Box on invoice tab
     * @return boolean
     */
    public boolean validateInvoiceCId(){
        if((customerIdComboBox.getSelectedItem()+"").compareTo("-")==0){
            System.out.println(customerIdComboBox.getSelectedItem()+"");
            JFrame frame = new JFrame("Customer Id Combo Box Error");
            JOptionPane.showMessageDialog(frame, "You can't select \'-\' as a Customer ID");
            return false;
        }
        else{
            System.out.println(customerIdComboBox.getSelectedItem()+"");
            return true;
        }
    }
    /**
     * Validates the product Id Combo Box on invoice tab
     * @return boolean
     */
    public boolean validateInvoicePId(){
        if((productIdComboBox.getSelectedItem()+"").compareTo("-")==0){
            JFrame frame = new JFrame("Product Id Combo Box Error");
            JOptionPane.showMessageDialog(frame, "You can't select \'-\' as a Product ID");
            return false;
        }
        else{
            return true;
        }
    }
    /**
     * Checks whether the is enough stock for an update
     * @param productId product ID associated with this update query
     * @param invoiceId invoice ID associated with this update query
     * @param newQuantityString quantity associated with this update query
     * @return
     */
    public int checkInvoiceUpdate(String productId,String invoiceId, String newQuantityString){
        Connection con;
        Statement stm;
        ResultSet result;
        int currentProductStock;
        int originalQuantity;
        int newQuantity = Integer.parseInt(newQuantityString);
        int newStock=0;
        try{
            con = DriverManager.getConnection(this.database_URL,this.username,this.dbPassword);
            stm = con.createStatement();
            result = stm.executeQuery("SELECT QuantityInStock FROM product WHERE ProductID=\'"+productId+"\'");
            result.next();
            currentProductStock = Integer.parseInt(result.getString(1));
            result = stm.executeQuery("SELECT quantity FROM invoice WHERE InvoiceID=\'"+invoiceId+"\'");
            result.next();
            originalQuantity = Integer.parseInt(result.getString(1));
            newStock = currentProductStock - (newQuantity-originalQuantity);
            if((currentProductStock - (newQuantity-originalQuantity)) >= 0){
                return newStock;
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
        return newStock;
    }
    /**
     * Counts the amount of results from an SQL Query - used for setting rows on the table
     * @param result the result of an SQL query
     * @return the number of rows in the query
     */
    public int countRows(ResultSet result){
        int count=0;
        try{
            while(result.next()){
                count++;
            }
        } catch(SQLException e){
            e.printStackTrace();
        }
        return count;
    }

    /**
     * Sets the dates for the different date fields
     */
    public void setDates(){
        userDOBField.setDateFormatString("dd/MM/yyyy");
        invoiceDateField.setDateFormatString("dd/MM/yyyy");
        Date date = new Date("01/01/2000");
        userDOBField.setDate(date);
        invoiceDateField.setDate(date);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomer;
    private javax.swing.JPanel addCustomerPanel;
    private javax.swing.JButton addInvoice;
    private javax.swing.JButton addProductBtn;
    private javax.swing.JButton addUser;
    private javax.swing.JPanel addUserPanel;
    private javax.swing.JButton cancelCustomerBtn;
    private javax.swing.JButton cancelCustomerSearch;
    private javax.swing.JButton cancelInvoiceSearch;
    private javax.swing.JButton cancelProudctSearch;
    private javax.swing.JButton cancelUserBtn;
    private javax.swing.JButton confirmCustomerBtn;
    private javax.swing.JLabel countyLabel;
    private javax.swing.JTextField customerAddressField;
    private javax.swing.JTextField customerCityField;
    private javax.swing.JComboBox<String> customerCountryComboBox;
    private javax.swing.JComboBox<String> customerCountyComboBox;
    private javax.swing.JLabel customerCountyLabel;
    private javax.swing.JTextField customerFirstNameField;
    private javax.swing.JComboBox<String> customerIdComboBox;
    private javax.swing.JTextField customerIdField;
    private javax.swing.JLabel customerIdLabel;
    private javax.swing.JLabel customerLabel;
    private javax.swing.JTextField customerLastNameField;
    private javax.swing.JTextField customerPhoneField;
    private javax.swing.JPanel customerTab;
    private javax.swing.JTable customerTable;
    private javax.swing.JButton deleteCustomer;
    private javax.swing.JButton deleteInvoice;
    private javax.swing.JButton deleteProduct;
    private javax.swing.JButton deleteUser;
    private javax.swing.JRadioButton femaleBtn;
    private javax.swing.ButtonGroup genderBtnGroup;
    private javax.swing.JButton invoiceCancelBtn;
    private javax.swing.JButton invoiceConfirmBtn;
    private com.toedter.calendar.JDateChooser invoiceDateField;
    private javax.swing.JTextField invoiceIdField;
    private javax.swing.JLabel invoiceIdLabel;
    private javax.swing.JLabel invoiceLabel;
    private javax.swing.JTextField invoicePriceField;
    private javax.swing.JTextField invoiceQuantityField;
    private javax.swing.JComboBox<String> invoiceSearchComboBox;
    private javax.swing.JPanel invoiceTab;
    private javax.swing.JTable invoiceTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel mainProductEventPanel;
    private javax.swing.JPanel mainProductEventPanel2;
    private javax.swing.JRadioButton maleBtn;
    private javax.swing.JButton productCancelBtn;
    private javax.swing.JButton productConfirmBtn;
    private javax.swing.JComboBox<String> productIdComboBox;
    private javax.swing.JTextField productIdField;
    private javax.swing.JLabel productIdLabel;
    private javax.swing.JLabel productLabel;
    private javax.swing.JTextField productNameField;
    private javax.swing.JTextField productPriceField;
    private javax.swing.JTextField productQuantityInBoxField;
    private javax.swing.JTextField productQuantityInStockField;
    private javax.swing.JPanel productTab;
    private javax.swing.JTable productTable;
    private javax.swing.JButton searchCustomer;
    private javax.swing.JComboBox<String> searchCustomerComboBox;
    private javax.swing.JTextField searchCustomerField;
    private javax.swing.JButton searchInvoice;
    private javax.swing.JTextField searchInvoiceField;
    private javax.swing.JButton searchProduct;
    private javax.swing.JComboBox<String> searchProductComboBox;
    private javax.swing.JTextField searchProductField;
    private javax.swing.JButton searchUser;
    private javax.swing.JButton searchUserCancelBtn;
    private javax.swing.JComboBox<String> searchUserComboBox;
    private javax.swing.JTextField searchUserField;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JButton updateCustomer;
    private javax.swing.JButton updateInvoice;
    private javax.swing.JButton updateProduct;
    private javax.swing.JButton updateUser;
    private javax.swing.JTextField userAddressField;
    private javax.swing.JTextField userCityField;
    private javax.swing.JButton userConfirmBtn;
    private javax.swing.JComboBox<String> userCountryComboBox;
    private javax.swing.JComboBox<String> userCountyComboBox;
    private com.toedter.calendar.JDateChooser userDOBField;
    private javax.swing.JTextField userEmailField;
    private javax.swing.JTextField userFirstNameField;
    private javax.swing.JTextField userIdField;
    private javax.swing.JLabel userIdLabel;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userLastNameField;
    private javax.swing.JTextField userPasswordField;
    private javax.swing.JTextField userPhoneField;
    private javax.swing.JPanel userTab;
    private javax.swing.JTable userTable;
    private javax.swing.JTextField userUsernameField;
    // End of variables declaration//GEN-END:variables
}
